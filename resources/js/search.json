[[{"l":"Welcome to Victor","p":["Victor is a lightweight, zero-dependencies Ruby library that lets you build SVG images using Ruby code."]},{"l":"Example","p":["Building a Meter Bar with Victor."]},{"l":"How it works","p":["Victor allows you to build SVG elements using plain Ruby. It translates any method call it doesnâ€™t recognize into an SVG tag, so calling methods like rect, circle, or line automatically generates the corresponding SVG tags."]},{"l":"Key Features","p":["Initialization: Create an SVG with attributes like viewBox or style:","Elements: Add SVG elements with attributes by calling method with the tag name:","Nesting: Nest elements using blocks:","Attributes and Styling: Attributes are converted as you would expect:","CSS: Define styles using a hash:"]},{"l":"Installation"}],[{"l":"Cheat Sheet","p":["This document provides a quick reference for common concepts in Victor."]},{"l":"Initializing"},{"l":"SVG tags"},{"l":"Nesting"},{"l":"Attributes"},{"l":"CSS"}],[{"l":"Ways to Use Victor","p":["Another option for building structured SVG objects. This approach involves subclassing Victor::SVG.","Approach","Basic","Best for advanced, component-driven design. This approach is used to compose complex SVGs from smaller, reusable components.","Class","Command Line","Component","DSL","Ideal for Victor newcomers. This approach uses minimal code for creating SVGs.","Perfect for non-Ruby developers or automation. Use the Victor CLI to convert between Ruby and SVG from the command line.","Perfect for quick, ad-hoc SVG generation. Use this approach if you prefer writing less Ruby.","Subclass","Suitable for building structured, testable SVG objects. This approach integrates Victor within your own class.","When to Choose","While Victor itself is minimal by design, it offers a variety of methods for building SVGs, accommodating different coding styles and project requirements.","You can begin with the basics, using straightforward method calls to define your SVG structure. Once you're comfortable with the fundamentals, you might want to explore more structured techniques."]}],[{"l":"Basic","p":["Create an instance of Victor::SVG and add SVG elements to it."]},{"l":"Target Image","p":["In the example below, we are creating this gear icon."]},{"l":"Usage Pattern","p":["Instantiate a Victor::SVG class.","Create SVG elements by utilizing its method_missing behavior, which allows you to call svg.rect, svg.circle, etc., to generate any SVG tag."]},{"l":"Code"},{"l":"See Also","p":["SVG Class Reference","Victor::SVG source code","Victor::SVGBase source code"]}],[{"l":"DSL","p":["By requiring victor/script, by having one component call and reference other components."]},{"l":"Target Image","p":["In the example below, we are creating this icon."]},{"l":"Usage Pattern","p":["Instantiate a Victor::SVG class.","Create SVG elements by utilizing its method_missing behavior, which allows you to call svg.rect, svg.circle, etc., to generate any SVG tag."]},{"l":"Code"},{"l":"See Also","p":["DSL Module Reference","victor/script source code","Victor::DSL source code"]}],[{"l":"Class","p":["Create your own class, that uses an instance of Victor::SVG."]},{"l":"Target Image","p":["In the example below, we are creating this grid with random colors.","This class generates output identical to the Subclass Example."]},{"l":"Usage Pattern","p":["Create your own class.","Use Victor::SVG internally to generate SVG."]},{"l":"Code"},{"l":"See Also","p":["SVG Class Reference","Victor::SVG source code","Victor::SVGBase source code"]}],[{"l":"Subclass","p":["Create your own class, that uses an instance of Victor::SVG."]},{"l":"Target Image","p":["In the example below, we are creating this grid with random colors.","This class generates output identical to the Class Example."]},{"l":"Usage Pattern","p":["Create your own class and inherit from Victor::SVG.","In the #initialize method, call super with any setup attributes.","Optionally, in the #initialize method, call an internal method to generate your SVG.","When you inherit from Victor::SVG, you can use SVG tags directly through method_missing(as shown in this example).","If you inherit from Victor::SVGBase, you'll need to use the #element method to create SVG tags."]},{"l":"Code"},{"l":"See Also","p":["SVG Class Reference","Victor::SVG source code","Victor::SVGBase source code"]}],[{"l":"Component","p":["By using the Victor::Component base class, you can compose complex SVG images by having one component call and reference other components."]},{"l":"Target Image","p":["In the example below, we are creating this output, using Cell, Piece and Board components."]},{"l":"Usage Pattern","p":["Create a class that inherits from Victor::Component","Implement width and height, wither as public methods or instance variables.","Implement body, and use it to add SVG elements and/or embed other components.","Optionally, implement style, and use it to return a CSS hash, which will be merged to any hosting component.","Optionally, if you want to provide host components with the ability to control x and y, provide them as public methods or instance variables."]},{"l":"Notes","p":["Components are always generated with 100% width and height, and with a viewBox that is determined by your x, y, width, height properties (x and y default to 0).","Once a component was rendered (#render, #to_s) or saved (#save), the#body method will be called once and once only. This means that at this point the SVG can no longer be altered.","Each component is also a standalone SVG, that can be saved or rendered independently."]},{"l":"Code"},{"l":"See Also","p":["Component Class Reference","Victor::Component source code"]}],[{"l":"Command Line","p":["Use the separate Victor Command Line Interface to create new Ruby scripts, and render SVGs."]},{"l":"Target Image","p":["In the example below, we are creating this ghost image."]},{"l":"Usage Pattern","p":["Run victor init RUBY_FILENAME to create a sample Victor DSL file.","Edit the file.","Run victor render RUBY_FILENAME SVG_FILENAME to render your SVG."]},{"l":"Code"},{"l":"See Also","p":["Ways to Use Victor DSL","Victor CLI source code"]}],[{"l":"SVG Class Reference","p":["The Victor::SVG(and Victor::SVGBase) class provides a foundation for creating SVG graphics in Ruby. It supports custom templates, CSS styling, and flexible SVG element generation."]},{"l":"Initialization"},{"l":"initialize","p":["Creates a new instance of SVG."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","attributes","Hash, optional","Initial attributes for the SVG, such as :width, :height, and :viewBox.","block","Proc, optional","A block that defines the SVG content."]},{"i":"example","l":":icon-ruby: Example"},{"l":"Building"},{"l":"element","p":["Adds an SVG element to the content."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","name","Symbol or String","The tag name of the SVG element.","value","String, optional","The content inside the element.","attributes","Hash, optional","Attributes for the SVG element."]},{"i":"notes","l":":icon-info: Notes","p":["If value is a Hash, it's treated as attributes.","If name ends with !, the content is not XML-escaped.","This method is the target for method_missing, enabling dynamic element names."]},{"i":"example","l":":icon-ruby: Example"},{"l":"build","p":["Evaluates a block in the context of the SVG instance, allowing dynamic SVG content creation."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","block","Proc, optional","A block that defines the SVG content."]},{"i":"example","l":":icon-ruby: Example"},{"i":"append-embed","l":"append / embed /","p":["Adds content from another source to the SVG. This can be used to compose SVG using other SVG objects."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","additional_content","Object","Any object that responds to to_s. Usually this is another Victor::SVG object."]},{"i":"example","l":":icon-ruby: Example"},{"l":"css","p":["Manages CSS definitions for the SVG."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","defs","Hash, optional","CSS definitions to set."]},{"i":"return-value","l":":icon-kebab-horizontal: Return Value","p":["Type","Description","Hash","The current CSS definitions."]},{"i":"example","l":":icon-ruby: Example"},{"i":"rendering--saving","l":"Rendering / Saving"},{"l":"save","p":["Saves the SVG content to a file."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","filename","String","The name of the file to save.","template","Symbol or String, optional","The template to use.","glue","String, optional","The glue string to use between SVG elements."]},{"i":"example","l":":icon-ruby: Example"},{"l":"render","p":["Renders the full SVG string, including its CSS and SVG header."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","template","Symbol or String, optional","The template to use.","glue","String, optional","The glue string to use between SVG elements."]},{"i":"example","l":":icon-ruby: Example"},{"l":"to_s","p":["Converts the SVG content to a string. This method is used internally to join the SVG content with the specified glue.","The string output provided by #to_s does not include the CSS or the SVG header. If you want the full SVG string, see #render"]},{"i":"example","l":":icon-ruby: Example"},{"i":"internal--special-use","l":"Internal / Special Use"},{"l":"setup","p":["Sets up the initial attributes for the SVG.","This method is used internally, and by the DSL and typically not required for basic usage."]},{"i":"parameters","l":":icon-kebab-horizontal: Parameters","p":["Parameter","Type","Description","attributes","Hash","Initial attributes for the SVG, such as :width, :height, and :viewBox.","Manages the array of SVG lines. This is used internally to assemble the SVG content.","Holds the attributes for the SVG element, such as width, height, and other SVG attributes."]},{"i":"example","l":":icon-ruby: Example"},{"l":"template","p":["Specifies the SVG template to use. This is rarely needed as the default template is often sufficient."]},{"i":"example","l":":icon-ruby: Example"},{"l":"glue","p":["Specifies the string to use between SVG elements. This is rarely needed as the default glue is often sufficient."]}],[{"l":"Component Class Reference","p":["The Victor::Component class provides you with means to create standalone SVG components that can be composed together."]},{"l":"Initialization","p":["Victor::Component is an abstract class. Create a class that inherits it:"]},{"i":"example","l":":icon-ruby: Example"},{"l":"Required Implementation Methods","p":["All components are rendered with 100% width and height, and with a given viewBox that is determined by x, y, width and height as provided by the object itself.","Your class is required to implement these methods:"]},{"l":"body","p":["This method will be called once and once only when the SVG is rendered. In this method you are expected to build your SVG by calling add.* and append(or its alias, embed) to add SVG elements."]},{"i":"example","l":":icon-ruby: Example"},{"i":"height--width","l":"height / width","p":["Since components are designed to be composable, each component is required to advertise its point height and width. This becomes useful when a container component needs to set its own size based on the size of the guest components.","You can either provide these values as method overrides, or as instance variables."]},{"i":"example","l":":icon-ruby: Example"},{"l":"Optional Implementation Methods"},{"i":"x--y","l":"x / y","p":["Similar to the width and height properties, you may define the x and y origin of your object. By default, these are set to 0.","This is useful when you wish to provide a host component with the ability to set the object's location, without resorting to positioning by other means, such as SVG's g transform='translate(...)' tag.","You can either provide these values as method overrides, or as instance variables."]},{"i":"example","l":":icon-ruby: Example"},{"l":"style","p":["The Component class is designed to allow each component to define its own CSS stylesheet, and is responsible for merging all styles together whenever you call the append / embed method.","To achieve this, you can define a style method that returns a hash."]},{"i":"example","l":":icon-ruby: Example"},{"l":"Additional Methods"},{"l":"add","p":["This is an alias to the underlying Victor::SVG object. It is intended to be used in your #body implementation to add SVG elements."]},{"i":"example","l":":icon-ruby: Example"},{"i":"append--embed","l":"append / embed","p":["Use this method in your your #body implementation, to embed another component. This method is doing two things:","Appending the SVG of the guest component.","Merging the CSS (#style) of the guest component into its own."]},{"i":"example","l":":icon-ruby: Example"},{"l":"svg","p":["Returns the final Victor::SVG object, after rendering all its guest components and their CSS styles.","Under most normal circumstances, you do not need to call this method directly, it is called as needed by other methods.","Once the svg method was called, the rendered SVG is considered frozen. This mechanism is in place in order to ensure that your body implementation is called only once, and applies to other methods (such as render and save) that call svg under the hood."]},{"l":"Delegated Methods","p":["Method","Description","save","Delegated to Victor::SVG#save","render","Delegated to Victor::SVG#render","content","Delegated to Victor::SVG#content","element","Delegated to Victor::SVG#element","css","Delegated to Victor::SVG#css","to_s","Delegated to Victor::SVG#to_s"]}],[{"l":"DSL Module Reference","p":["append","build","css","Delegated to Victor::SVG#append","Delegated to Victor::SVG#build","Delegated to Victor::SVG#css","Delegated to Victor::SVG#element","Delegated to Victor::SVG#render","Delegated to Victor::SVG#save","Delegated to Victor::SVG#setup","Description","element","For more information and example, see Ways to Use Victor DSL.","Method","render","Returns a Victor::SVG instance","save","setup","svg","The Victor::DSL module is a thin wrapper around Victor::SVG that provides access to the SVG object, and direct access to several of its methods."]}]]