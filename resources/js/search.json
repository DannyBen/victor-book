[[{"l":"Welcome to Victor","p":["Victor is a lightweight, zero-dependencies Ruby library that lets you build SVG images using Ruby code."]},{"l":"Example","p":["Building a Meter Bar with Victor."]},{"l":"How it works","p":["Victor allows you to build SVG elements using plain Ruby. It translates any method call it doesnâ€™t recognize into an SVG tag, so calling methods like rect, circle, or line automatically generates the corresponding SVG tags."]},{"l":"Key Features","p":["Initialization: Create an SVG with attributes like viewBox or style:","Elements: Add SVG elements with attributes by calling method with the tag name:","Nesting: Nest elements using blocks:","Attributes and Styling: Attributes are converted as you would expect:","CSS: Define styles using a hash:"]},{"l":"Installation"}],[{"l":"Cheat Sheet","p":["This document provides a quick reference for common concepts in Victor."]},{"l":"Initializing"},{"l":"SVG tags"},{"l":"Nesting"},{"l":"Attributes"},{"l":"CSS"}],[{"l":"Ways to Use Victor","p":["Another option for building structured SVG objects. This approach involves subclassing Victor::SVG.","Approach","Basic","Best for advanced, component-driven design. This approach is used to compose complex SVGs from smaller, reusable components.","Class","Command Line","Component","DSL","Ideal for Victor newcomers. This approach uses minimal code for creating SVGs.","Perfect for non-Ruby developers or automation. Use the Victor CLI to convert between Ruby and SVG from the command line.","Perfect for quick, ad-hoc SVG generation. Use this approach if you prefer writing less Ruby.","Subclass","Suitable for building structured, testable SVG objects. This approach integrates Victor within your own class.","When to Choose","While Victor itself is minimal by design, it offers a variety of methods for building SVGs, accommodating different coding styles and project requirements.","You can begin with the basics, using straightforward method calls to define your SVG structure. Once you're comfortable with the fundamentals, you might want to explore more structured techniques."]}],[{"l":"Basic","p":["Create an instance of Victor::SVG and add SVG elements to it."]},{"l":"Target Image","p":["In the example below, we are creating this gear icon."]},{"l":"Usage Pattern","p":["Instantiate a Victor::SVG class.","Create SVG elements by utilizing its method_missing behavior, which allows you to call svg.rect, svg.circle, etc., to generate any SVG tag."]},{"l":"Code"},{"l":"See Also","p":["SVG Class Reference","Victor::SVG source code","Victor::SVGBase source code"]}],[{"l":"DSL","p":["By requiring victor/script, by having one component call and reference other components."]},{"l":"Target Image","p":["In the example below, we are creating this icon."]},{"l":"Usage Pattern","p":["Instantiate a Victor::SVG class.","Create SVG elements by utilizing its method_missing behavior, which allows you to call svg.rect, svg.circle, etc., to generate any SVG tag."]},{"l":"Code"},{"l":"See Also","p":["DSL Class Reference","victor/script source code","Victor::DSL source code"]}],[{"l":"Class","p":["Create your own class, that uses an instance of Victor::SVG."]},{"l":"Target Image","p":["In the example below, we are creating this grid with random colors.","This class generates output identical to the Subclass Example."]},{"l":"Usage Pattern","p":["Create your own class.","Use Victor::SVG internally to generate SVG."]},{"l":"Code"},{"l":"See Also","p":["SVG Class Reference","Victor::SVG source code","Victor::SVGBase source code"]}],[{"l":"Subclass","p":["Create your own class, that uses an instance of Victor::SVG."]},{"l":"Target Image","p":["In the example below, we are creating this grid with random colors.","This class generates output identical to the Class Example."]},{"l":"Usage Pattern","p":["Create your own class and inherit from Victor::SVG.","In the #initialize method, call super with any setup attributes.","Optionally, in the #initialize method, call an internal method to generate your SVG.","When you inherit from Victor::SVG, you can use SVG tags directly through method_missing(as shown in this example).","If you inherit from Victor::SVGBase, you'll need to use the #element method to create SVG tags."]},{"l":"Code"},{"l":"See Also","p":["SVG Class Reference","Victor::SVG source code","Victor::SVGBase source code"]}],[{"l":"Component","p":["By using the Victor::Component base class, you can compose complex SVG images by having one component call and reference other components."]},{"l":"Target Image","p":["In the example below, we are creating this output, using Cell, Piece and Board components."]},{"l":"Usage Pattern","p":["Create a class that inherits from Victor::Component","Implement width and height, wither as public methods or instance variables.","Implement body, and use it to add SVG elements and/or embed other components.","Optionally, implement style, and use it to return a CSS hash, which will be merged to any hosting component.","Optionally, if you want to provide host components with the ability to control x and y, provide them as public methods or instance variables."]},{"l":"Notes","p":["Components are always generated with 100% width and height, and with a viewBox that is determined by your x, y, width, height properties (x and y default to 0).","Once a component was rendered (#render, #to_s) or saved (#save), the#body method will be called once and once only. This means that at this point the SVG can no longer be altered.","Each component is also a standalone SVG, that can be saved or rendered independently."]},{"l":"Code"},{"l":"See Also","p":["Component Class Reference","Victor::Component source code"]}],[{"l":"Command Line"}],[{"l":"SVG Class Reference","p":["Victor::SVG provides you with these methods:"]},{"l":"save","p":["Save the SVG."]},{"i":"render--to_s","l":"render / to_s","p":["Render the SVG to string. The method is delegated to the underlying Victor::SVG object. This method is called when you puts the object."]},{"l":"content","p":["Render the array of SVG lines. The method is delegated to the underlying Victor::SVG object."]}],[{"l":"Component","p":["Victor::Component provides you with these methods:"]},{"l":"add","p":["This is an alias to the underlying Victor::SVG object (which is also represented as #vector). It is intended to be used in your #body implementation, like this:"]},{"i":"append--embed","l":"append / embed","p":["Use this method in your your #body implementation, to embed another component. This method is doing two things:","Appending the SVG of the guest component.","Merging the CSS (#style) of the guest component into its own."]},{"l":"save","p":["Save the SVG. The method is delegated to the underlying Victor::SVG object."]},{"i":"render--to_s","l":"render / to_s","p":["Render the SVG to string. The method is delegated to the underlying Victor::SVG object. This method is called when you puts the object."]},{"l":"content","p":["Render the array of SVG lines. The method is delegated to the underlying Victor::SVG object."]}],[{"l":"DSL Class Reference","p":["Victor::SVG provides you with these methods:"]},{"l":"save","p":["Save the SVG."]},{"i":"render--to_s","l":"render / to_s","p":["Render the SVG to string. The method is delegated to the underlying Victor::SVG object. This method is called when you puts the object."]},{"l":"content","p":["Render the array of SVG lines. The method is delegated to the underlying Victor::SVG object."]}]]