[[{"l":"Welcome to Victor","p":["Victor is a lightweight, zero-dependencies Ruby library that lets you build SVG images using Ruby code."]},{"l":"Example","p":["Building a Meter Bar with Victor."]},{"l":"How it works","p":["Victor allows you to build SVG elements using plain Ruby. It translates any method call it doesnâ€™t recognize into an SVG tag, so calling methods like rect, circle, or line automatically generates the corresponding SVG tags."]},{"l":"Key Features","p":["Initialization: Create an SVG with attributes like viewBox or style:","Elements: Add SVG elements with attributes by calling method with the tag name:","Nesting: Nest elements using blocks:","Attributes and Styling: Attributes are converted as you would expect:","CSS: Define styles using a hash:"]},{"l":"Installation"}],[{"l":"Cheat Sheet","p":["This document provides a quick reference for common concepts in Victor."]},{"l":"Initializing"},{"l":"SVG tags"},{"l":"Nesting"},{"l":"Attributes"},{"l":"CSS"}],[{"l":"Ways to Use Victor","p":["Another option for building structured SVG objects. This approach involves subclassing Victor::SVG.","Approach","Basic","Best for advanced, component-driven design. This approach is used to compose complex SVGs from smaller, reusable components.","Class","Command Line","Component","DSL","Ideal for Victor newcomers. This approach uses minimal code for creating SVGs.","Perfect for non-Ruby developers or automation. Use the Victor CLI to convert between Ruby and SVG from the command line.","Perfect for quick, ad-hoc SVG generation. Use this approach if you prefer writing less Ruby.","Subclass","Suitable for building structured, testable SVG objects. This approach integrates Victor within your own class.","When to Choose","While Victor itself is minimal in its design approach, it is quite flexible in offering several approaches to building SVGs, catering to different coding styles and project needs.","You can start with the basics, using simple method calls to define your SVG structure, and after you are familiar with the basic concepts, consider switching to a more structured approach."]}],[{"l":"Basic"}],[{"l":"DSL"}],[{"l":"Class"}],[{"l":"Subclass"}],[{"l":"Component"}],[{"l":"Command Line"}]]